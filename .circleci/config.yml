version: 2.0
jobs:
  build:
    working_directory: /app
    docker:
      - image: docker:18.06.0-ce-git
    steps:
      - checkout
      - setup_remote_docker:
          version: 17.09.0-ce
      - restore_cache:
          keys:
            - layers-v1-{{ .Branch }}
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            if [ -f /caches/app-layers.tar.gz ]; then gunzip -c /caches/app-layers.tar.gz | docker load; fi
      - run:
          name: Build application Docker image
          command: |
            GIT_COMMIT=$CIRCLE_SHA1
            docker build -t app . | tee /tmp/build_output.txt
            grep '\-\-\-> [a-z0-9]' /tmp/build_output.txt | grep -v 'Using cache' | grep -v 'Running in ' | sed -e 's/[ >-]//g' | sed 's/\x1b\[[0-9;]*m//g' > /tmp/layers.txt
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save $(cat /tmp/layers.txt) | gzip > /caches/app-layers.tar.gz
            docker save -o /caches/app.tar app
      - save_cache:
          key: layers-v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app-layers.tar.gz
      - save_cache:
          key: built-image-v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
  test:
    docker:
      - image: docker:18.06.0-ce-git
    steps:
      - checkout
      - setup_remote_docker:
          version: 17.09.0-ce
      - restore_cache:
          keys:
            - built-image-v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run: docker load -i /caches/app.tar || true
      - run:
          name: Setup Code Climate test-reporter
          command: |
            wget https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 -O ./cc-test-reporter
            chmod +x ./cc-test-reporter
            ./cc-test-reporter before-build
      - run:
          name: Run tests
          command: |
            docker run --name test-runner app pytest ../tests/ \
              --cov=.. \
              --cov-report xml:/tmp/reports/coverage/coverage.xml \
              --cov-config ../setup.cfg \
              --junitxml=/tmp/reports/pytest/junit.xml
      - run:
          name: Copy test results from container
          command: |
            docker cp test-runner:/tmp/reports/ test-results
          when: always
      - run:
          name: Store Code Climate report
          command: |
            ./cc-test-reporter format-coverage --input-type coverage.py test-results/coverage/coverage.xml
            ./cc-test-reporter upload-coverage
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results

  push-branch:
    docker:
      - image: docker:18.06.0-ce
    steps:
      - setup_remote_docker:
          version: 17.09.0-ce
      - restore_cache:
          keys:
            - built-image-v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run: docker load -i /caches/app.tar || true
      - run:
          name: Push to Docker Hub
          command: |
            TAG=$CIRCLE_BRANCH
            docker tag app chaosk/teerace:$TAG
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push chaosk/teerace:$TAG

  push-tag:
    docker:
      - image: docker:18.06.0-ce
    steps:
      - setup_remote_docker:
          version: 17.09.0-ce
      - restore_cache:
          keys:
            - built-image-v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run: docker load -i /caches/app.tar || true
      - run:
          name: Push to Docker Hub
          command: |
            docker tag app chaosk/teerace:$CIRCLE_TAG
            docker tag app chaosk/teerace:latest
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push chaosk/teerace:$CIRCLE_TAG
            docker push chaosk/teerace:latest

  deploy:
    docker:
      - image: circleci/node:8.10.0
    steps:
      - checkout
      - run:
          name: Install Now CLI
          command: sudo npm install --global --unsafe-perm now
      - run:
          name: Deploy using Now
          command: |
            cd .now
            echo "FROM chaosk/teerace:$CIRCLE_TAG\nEXPOSE 8000\nCMD [\"now-runner\"]" > Dockerfile
            now \
              --local-config now.master.json \
              --token $ZEIT_TOKEN
            now \
              --local-config now.master.json \
              --token $ZEIT_TOKEN \
              alias

workflows:
  version: 2
  default:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - test:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - push-branch:
          requires:
            - test
          filters:
            tags:
              ignore: /.*/
            branches:
              only: master
      - push-tag:
          requires:
            - test
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - deploy:
          requires:
              - push-tag
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
